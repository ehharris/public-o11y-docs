.. _configure-android-instrumentation:

*****************************************************************
Configure the Splunk Android RUM instrumentation
*****************************************************************

.. meta::
   :description: Configure the Splunk Observability Cloud real user monitoring / RUM instrumentation for your Android applications.

You can configure the Android RUM agent from the Splunk OpenTelemetry Instrumentation for Android to add custom attributes, adapt the instrumentation to your environment and application, customize sampling, and more.

To configure the Android RUM agent, pass the settings by preparing a ``Config`` instance using the fluent builder API. The following example shows how to configure the RUM token, Splunk realm, and application name:

.. code-block:: kotlin

   class MyApplication extends Application {
      private final String realm = "<realm>";
      private final String rumAccessToken = "<your_RUM_access_token>";

      @Override
      public void onCreate() {
         super.onCreate();

      SplunkRum.builder()
            .setApplicationName("<name_of_app>")
            .setRealm("<realm>"")
            .setRumAccessToken("<rumAccessToken>")
            .build(this);
      }
   }

.. _android-rum-settings:

General settings
======================================================

Use the following settings to configure the Android RUM agent:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Option
     - Description
   * - :code:`setRumAccessToken(String)`
     - RUM token that authorizes the agent to send telemetry to Splunk Observability Cloud. To generate a RUM access token, see :ref:`rum-access-token`.
   * - :code:`setRealm(String)`
     - Realm in Splunk Observability Cloud, used to generate the endpoint URL. For example, ``us0``.
   * - :code:`setBeaconEndpoint(String)`
     - Use this method instead of :code:`setRealm(String)` to provide the full URL of the RUM ingest endpoint. For example, :code:`https://rum-ingest.<realm>.signalfx.com/v1/rum`.
   * - :code:`setApplicationName(String)`
     - Sets the name of the application.
   * - :code:`setDeploymentEnvironment(String)`
     - Sets the environment attribute on the spans that are generated by the instrumentation.
   * - :code:`setGlobalAttributes(Attributes)`
     - Attributes to append to every span collected. For an example, see :ref:`android-rum-attributes`.
   * - :code:`filterSpans(Consumer<SpanFilterBuilder>)`
     - Use this setting to filter or customize spans. For example, you can use ``filterSpans`` to redact personal identifiable information (PII), remove span attributes, or change the span name. See :ref:`android-rum-span-filtering`.
   * - :code:`enableDiskBuffering()`
     - Activates storage-based buffering of telemetry. This setting is useful when instrumenting applications that might work offline for extended periods of time.
   * - :code:`limitDiskUsageMegabytes(int)`
     -  Sets the maximum amount of storage to use for disk buffering. The default value is 25 MB. Requires ``diskBufferingEnabled`` to be ``true``.
   * - :code:`enableSessionBasedSampling(double)`
     - Activates session ID based sampling and sets a sampling ratio. The sampling ratio is the probability of a session being included between. Values range between ``0.0`` (all dropped) and ``1.0`` (all included).
   * - :code:`enableDebug()`
     - Activates debug mode. This feature is inactive by default. Activating debug mode activates the OpenTelemetry logging span exporter, which might be useful when debugging instrumentation issues.
   * - :code:`enableExperimentalOtlpExporter()`
     - Activates the experimental OTLP exporter. The exporter is not compatible with disk buffering. ``enableExperimentalOtlpExporter()`` is deprecated in Splunk RUM as of February 4, 2025. Although ``enableExperimentalOtlpExporter()`` continues to function, it will be removed in a future version, where OTLP will be the default exporter format. 

.. _android-rum-instrumentation-settings:

Instrumentation settings
==============================================

Use the following settings to activate or deactivate the collection of specific data:

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Option
     - Description
   * - :code:`disableSubprocessInstrumentation()`
     - Deactivates instrumentation for application subprocesses. Accepts an application ID value.
   * - :code:`enableBackgroundInstrumentationDeferredUntilForeground()`
     - Enables the deferrment of background telemetry until the app is foregrounded. Used to connect background session data to a real user session.
   * - :code:`disableCrashReporting()`
     - Deactivates crash reporting. This feature is activated by default.
   * - :code:`disableAnrDetection()`
     - Deactivates ANR (Application not responding) detection and reporting. This feature is activated by default.
   * - :code:`disableNetworkMonitor()`
     - Deactivates network monitoring. This feature is activated by default.
   * - :code:`disableSlowRenderingDetection()`
     - Deactivates the detection of slow frame renders. This feature is activated by default. Splunk RUM defines renders as slow or frozen following the Android Vitals definition of the Android Developers documentation.
   * - :code:`setSlowRenderingDetectionPollInterval(Duration)`
     - Sets the default polling interval for slow or frozen render detection. The default value is ``1000`` milliseconds. The value must be positive.

.. _android-rum-http-client-settings:

HTTP instrumentation settings
==============================================

The Android RUM agent includes instrumentation for the OkHttp and Volley HTTP clients.

OkHttp
-----------------------------------------------

.. note:: 
   This form of support for OkHttp is deprecated in Splunk RUM as of February 4, 2025. Although ``createRumOkHttpCallFactory(OkHttpClient client)`` continues to function, it will be removed in a future version, and replaced with an option for automatic instrumentation of OkHttp3 or a new API for manual instrumentation. 

Instrument OkHttp using the ``Call.Factory`` wrapper, as in the following example:

.. code-block:: java

   private Call.Factory buildOkHttpClient(SplunkRum splunkRum) {
      return splunkRum.createRumOkHttpCallFactory(new OkHttpClient());
   }

Volley HTTP (Experimental)
-------------------------------------------------

.. note:: 
  All methods in ``VolleyTracing`` and ``VolleyTracingBuilder`` are deprecated in Splunk RUM as of February 4, 2025. Although these methods continue to function, they will be removed in a future version. There is no replacement for these methods. 

To instrument Volley HTTP, add the ``splunk-otel-android-volley`` dependency to the ``build.gradle.kts`` file:

.. code-block:: java

   dependencies {
      //...
      implementation("com.splunk:splunk-otel-android-volley:+")
      //...
   }

Use the ``VolleyTracing`` class to create an instance of ``VolleyTracing``, as in the following example:

.. code-block:: java

   VolleyTracing volleyTracing = VolleyTracing.builder(splunkRum).build();

The following example shows how to retrieve an instance of ``HurlStack`` from your ``volleyTracing`` instance:

.. code-block:: java

   HurlStack hurlStack = volleyTracing.newHurlStack();

You can then use the ``hurlStack`` instance to create your request queue and send requests as usual.

Capture additional request and response headers
-------------------------------------------------

You can capture additional request and response headers using the HTTP instrumentations. Additional headers appear with the ``http.request.header.`` and ``http.response.header.`` prefixes.

To capture additional headers, provide the builder with a list of headers to catch. For example:

.. code-block:: java
  
   builder.setCapturedRequestHeaders(asList("X-My-Custom-Request-Header"))
   builder.setCapturedResponseHeaders(asList("X-My-Custom-Response-Header"))

The resulting span contains an ``http.request.header.x_my_custom_header`` attribute with one or more header values.
